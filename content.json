{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"Huayan Wong","url":"http://yoursite.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-04-03T07:50:09.926Z","updated":"2019-04-03T07:29:05.746Z","comments":false,"path":"/404.html","permalink":"http://yoursite.com//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-04-03T07:50:09.969Z","updated":"2019-04-03T07:29:05.752Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2019-04-03T07:50:09.979Z","updated":"2019-04-03T07:29:05.753Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-04-03T07:50:10.001Z","updated":"2019-04-03T07:29:05.755Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-04-03T07:50:09.989Z","updated":"2019-04-03T07:29:05.757Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-04-03T08:06:44.000Z","updated":"2019-04-08T10:16:32.049Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-04-03T07:50:10.011Z","updated":"2019-04-03T07:29:05.760Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2019-04-02T04:21:02.820Z","updated":"2019-04-02T04:21:02.820Z","comments":true,"path":"2019/04/02/hello-world/","link":"","permalink":"http://yoursite.com/2019/04/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new \"My New Post\"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment","categories":[],"tags":[]},{"title":"CSS 各种Hack手段","slug":"css-hack","date":"2017-06-24T19:25:24.000Z","updated":"2018-10-20T07:46:51.000Z","comments":false,"path":"2017/06/25/css-hack/","link":"","permalink":"http://yoursite.com/2017/06/25/css-hack/","excerpt":"","text":"随着浏览器的发展，css hack 技术的使用应该越来越少了，但是在某些关键时刻以及综合的WEB应用或者老项目中，可能还需要使用 css hack 技术来解决一些问题。css hack 分类css hack 分类大致有 3 种表现形式：IE条件注释法、CSS属性前缀法以及选择器前缀法。IE 条件注释法（即 HTML 条件注释 Hack）：针对所有IE(注：IE10+ 已经不再支持条件注释)：&lt;!--[if IE]&gt;IE浏览器显示的内容 &lt;![endif]--&gt;；针对 IE6 及以下版本：&lt;!--[if lt IE 6]&gt;只在IE6-显示的内容 &lt;![endif]--&gt;。这类 Hack 不仅对 CSS 生效，对写在判断语句里面的所有代码都会生效。属性前缀法（即类内部 Hack）：例如 IE6 能识别下划线 _ 和星号 *，IE7 能识别星号 *，但不能识别下划线 _，IE6~IE10 都认识 \\9，但 firefox 前述三个都不能认识。选择器前缀法（即选择器 Hack）：例如 IE6 能识别 *html .class{}，IE7 能识别 *+html .class{} 或者 *:first-child+html .class{}。css hack 书写顺序，一般是将适用范围广、被识别能力强的 CSS 定义在前面。条件注释法语法：123&lt;!-- [if &lt;keywords&gt;? IE &lt;version&gt; ?]&gt;HTML 代码块&lt;![endif]--&gt;取值：&lt;keywords&gt;if 条件共包含 6 种选择方式：是否、大于、大于或等于、小于、小于或等于、非指定版本是否：指定是否 IE 或 IE 某个版本。关键字：空大于：选择大鱼指定版本的 IE 版本。关键字：gt大于或等于：选择大于或等于指定版本的 IE 版本。关键字：gte小于：选择小于指定版本的IE版本。关键字：lt小于或等于：选择小于或等于指定版本的IE版本。关键字：lte非指定版本：选择除指定版本外的所有IE版本。关键字：!说明：用于选择 IE 浏览器及IE的不同版本示例：123456789101112131415161718192021222324只在IE下生效&lt;!--[if IE]&gt;这段文字只在IE浏览器显示&lt;![endif]--&gt;只在IE6下生效&lt;!--[if IE 6]&gt;这段文字只在IE6浏览器显示&lt;![endif]--&gt;只在IE6以上版本生效&lt;!--[if gte IE 6]&gt;这段文字只在IE6以上(包括)版本IE浏览器显示&lt;![endif]--&gt;只在IE8上不生效&lt;!--[if ! IE 8]&gt;这段文字在非IE8浏览器显示&lt;![endif]--&gt;非IE浏览器生效&lt;!--[if !IE]&gt;这段文字只在非IE浏览器显示&lt;![endif]--&gt;需要说明的是，IE10和11已经不支持这种条件注释法了。运行上面示例CSS 属性前缀法语法：selector {?property:value?;}取值：_：选择 IE6 及以下。连接线（中划线）（-）亦可使用，为了避免与某些带中划线的属性混淆，所以使用下划线（_）更为合适。*：选择 IE7 及以下。诸如：（+）与（#）之类的均可使用，不过业界对（*）的认知度更高。\\9：选择 IE6+。\\0：选择 IE8+ 和 Opera。[;property:value;];：选择 webkit 核心浏览器（Chrome,Safari）。IE7 及以下也能识别。中括号内外的 3 个分号必须保留，第一个分号前可以是任意规则或任意多个规则。[;color:#f00;]; 与 [color:#f00;color:#f00;]; 与 [margin:0;padding:0;color:#f00;]; 是等价的。生效的始终是中括号内的最后一条规则，所以通常选用第一种写法最为简洁。说明：选择不同的浏览器及版本尽可能减少对 CSS Hack 的使用。Hack 有风险，谨慎使用。一些 CSS Hack 由于浏览器存在交叉认识，所以需要通过层层覆盖的方式来实现对不同浏览器进行 Hack 的。如下面这个例子：12345.test&#123; color:#090\\9; /* For IE8+ */ *color:#f00; /* For IE7 and earlier */ _color:#ff0; /* For IE6 and earlier */&#125;上述 Hack 均需运行在标准模式下，若在怪异模式下运行，这些 Hack 将会被不同版本的 IE 相互识别，导致失效。选择器前缀法语法：&lt;hack&gt;selector{sRules}说明：1234* html .test&#123;color:#090;&#125; /* For IE6 and earlier */* + html .test&#123;color:#ff0;&#125; /* For IE7 */.test:lang(zh-cn)&#123;color:#f00;&#125; /* For IE8+ and not IE */.test:nth-child(1)&#123;color:#0ff;&#125; /* For IE9+ and not IE */上述代码中的3,4两行就是典型的利用能力来进行选择的 CSS Hack。","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"gulp 详解与使用","slug":"gulp","date":"2017-04-30T17:25:24.000Z","updated":"2018-10-20T07:46:51.000Z","comments":false,"path":"2017/05/01/gulp/","link":"","permalink":"http://yoursite.com/2017/05/01/gulp/","excerpt":"什么是 gulpgulp 是一个前端构建工具，它能通过自动执行常见任务，比如编译预处理 CSS ，压缩 JavaScript 和刷新浏览器，来改进网站开发的过程，从而使开发更加快速高效。为什么要用 gulp与 grunt 相比，gulp 无需写一大堆繁杂的配置参数，API（中文 API） 也非常简单，学习起来很容易，而且 gulp 使用的是 nodejs 中 stream 来读取和操作数据，其速度更快。gulp 有庞大的生态圈，且每天都在发展。依靠成千上万可供选择的插件，你可以利用 gulp 自动完成几乎任何事。如何使用 gulpInstalling Gulp新版的 gulp 命令行工具已经改名为 gulp-cli 。如果你之前安装了全局的 gulp 。在使用新的 gulp-cli 之前，执行命令npm rm --global gulp ，将之前的全局 gulp 卸掉。","text":"什么是 gulpgulp 是一个前端构建工具，它能通过自动执行常见任务，比如编译预处理 CSS ，压缩 JavaScript 和刷新浏览器，来改进网站开发的过程，从而使开发更加快速高效。为什么要用 gulp与 grunt 相比，gulp 无需写一大堆繁杂的配置参数，API（中文 API） 也非常简单，学习起来很容易，而且 gulp 使用的是 nodejs 中 stream 来读取和操作数据，其速度更快。gulp 有庞大的生态圈，且每天都在发展。依靠成千上万可供选择的插件，你可以利用 gulp 自动完成几乎任何事。如何使用 gulpInstalling Gulp新版的 gulp 命令行工具已经改名为 gulp-cli 。如果你之前安装了全局的 gulp 。在使用新的 gulp-cli 之前，执行命令npm rm --global gulp ，将之前的全局 gulp 卸掉。Install the gulp command1npm install --global gulp-cliInstall gulp in your devDependenciesRun this command in your project directory1npm install --save-dev gulpCreate a gulpfileCreate a file called gulpfile.js in your project root with these contents:12345var gulp = require('gulp');gulp.task('default', function() &#123; // place code for your default tash here&#125;);Test it outRun the gulp command in your projct directory:1gulpgulp APIgulp 的核心 API 有四个：gulp.task() 、 gulp.src() 、 gulp.dest() 、 gulp.watch() 。gulp APIgulp API 中文下面详细介绍一下：gulp.src()gulp.src() 可以读取你需要操作的文件，相比于 Grunt 主要以文件为媒介来运行它的工作流，gulp 使用的是 Nodejs 中的 stream 流，首先获取到需要的 stream ，然后可以通过 stream 的 pipe() 方法把流导入到你想要的地方，比如 gulp 的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以 gulp 是以 stream 为媒介的，它不需要频繁的生成临时文件，这也是 gulp 的速度比 Grunt 快的一个原因。再回到正题上来，gulp.src() 方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流（Vinyl files），这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，这个我们暂时不用去深入理解，你只需简单的理解可以用这个方法来读取你需要操作的文件就行了。其语法为：1gulp.src(globs [, options])gulp 用到的 glob 的匹配规则以及一些文件匹配技巧。gulp 内部使用了 node-glob 模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：* 匹配文件路径中的 0 个或多个字符，但不会匹配路径分配符，除非路径分隔符出现在末尾** 匹配路径中的 0 个或多个目录及其子目录，需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。? 匹配文件路径中的一个字符（不会匹配路径分隔符）[…] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为 ^ 或 ! 时，则表示不匹配方括号中出现的其他字符中的任意一个，类似 js 正则表达式中的用法。!(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的?(pattern|pattern|pattern) 匹配括号中给定的任一模式 0 次或 1 次，类似于 js 正则中的(pattern|pattern|pattern)?+(pattern|pattern|pattern) 匹配括号中给定的任一模式至少 1 次，类似于正则中的(pattern|pattern|pattern)+*(pattern|pattern|pattern) 匹配括号中的给定的任一模式 0 次或多次，类似于 js 正则中的 (pattern|pattern|pattern)*@(pattern|pattern|pattern) 匹配括号中给定的任一模式 1 次，类似于 js 正则中的(pattern|pattern|pattern)下面以一系列例子来加深理解* 能匹配 a.js 、 x.y 、 abc 、 abc/ ，但不能匹配 a/b.js*.* 能匹配 a.js 、 style.css 、 a.b 、 x.y*/*/*.js 能匹配 a/b/c.js 、 x/y/z.js ，不能匹配 a/b.js 、a/b/c/d.js** 能匹配 abc 、 a/b.js 、 a/b/c.js 、 x/y/z 、x/y/z/a.b ，能用来匹配所有的目录和文件*/.js 能匹配 foo.js 、 a/foo.js 、 a/b/foo.js 、 a/b/c/foo.jsa/**/z 能匹配 a/z 、 a/b/z 、 a/b/c/z 、 a/d/g/h/r/za/**b/z 能匹配 a/b/z 、 a/fb/z ，但不能匹配 a/x/gb/z ，因为只有单 ** 单独出现才能匹配多级目录?.js 能匹配 a.js 、 b.js 、 c.jsa?? 能匹配 a.b 、 abc ，但不能匹配 ab/ ，因为它不会匹配路径分隔符[xyz].js 只能匹配 x.js 、 y.js 、 z.js ，不会匹配 xy.js 、 xyz.js 等，整个中括号只代表一个字符[^xyz].js 能匹配 a.js 、 b.js 、 c.js 等，不能匹配 x.js 、 y.js 、 z.js当有多种匹配模式时可以使用数组12// 使用数组的方式来匹配多种文件gulp.src(['js/*.js','css/*.css','*.html'])使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上 ! 即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式12gulp.src([*.js,'!b*.js']) //匹配所有 js 文件，但排除掉以 b 开头的 js 文件gulp.src(['!b*.js',*.js]) //不会排除任何文件，因为排除模式不能出现在数组的第一个元素中此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式想加起来得到的结果。展开的例子如下：a{b,c}d 会展开为 abd 、 acda{b,}c 会展开为 abc 、 aca{0..3}d 会展开为 a0d 、 a1d 、 a2d 、 a3da{b,c{d,e}f}g 会展开为 abg 、 acdfg 、 acefga{b,c}d{e,f}g 会展开为 abdeg 、 acdeg 、 abdfg 、 abdeggulp.dest()gulp.dest() 方法是用来写文件的，其语法为：1gulp.dest(path[, options])path 为写入文件的路径我们给 gulp.dest() 传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，所以生成的文件名是由导入到它的文件流决定的，即使我们给它传入一个带有文件名的路径参数，然后它也会把这个文件名当作是目录名，例如：123var gulp = require(\"gulp\");gulp.src(\"script/jquery.js\").pipe(gulp.dest(\"dist/foo.js\"));// 最终生成的文件路径为 dist/foo.js/jquery.js ，而不是 dist/foo.js要想改变文件名，可以使用插件 gulp-rename下面说说生成的文件路径与我们给 gulp.dest() 方法传入的路径参数之间的关系。gulp.dest(path) 生成的文件路径是我们传入的 path 参数后面再加上 gulp.src() 中有通配符开始出现的那部分路径。例如：12345var gulp = require(\"gulp\");//有通配符开始出现的那部分路径为 **/*.jsgulp.src(\"script/**/*.js\").pipe(gulp.dest(\"dist\"));//最后生成的文件路径为 dist/**/*.js//如果 **/*.js 匹配到的文件为 jquery/jquery.js ，则生成的文件路径为 dist/jquery/jquery.js再举更多一点的例子123456789101112gulp.src(\"script/avalon/avalon.js\").pipe(gulp.dest(\"dist\"));//没有通配符出现的情况，最后生成的文件路径为 dist/avalon.jsgulp.src(\"script/**/underscore.js\").pipe(gulp.dest(\"dist\"));//有通配符开始出现的那部分路径为 **/underscore.js//假设匹配到的文件为script/util/underscore.js//则最后生成的文件路径为dist/util/underscore.jsgulp.src(\"script/*\").pipe(gulp.dest(\"dist\"));//有通配符出现的那部分路径为*//假设匹配到的文件为script/zepto.js//则最后生成的文件路径为dist/zepto.js通过指定 gulp.src() 方法配置参数中的 base 属性，我们可以灵活的来改变 gulp.dest() 生成的文件路径。当我们没有在 gulp.src() 方法配置参数中的 base 属性，base 的默认值为通配符开始出现之前那部分路径，例如：1gulp.src(\"app/src/**/*.css\") //此时base的值为 app/src上面我们说的 gulp.dest() 所生成的文件路径的规则，其实也可以理解成，用我们给 gulp.dest() 传入的路径替换掉 gulp.src() 中的 base 路径，最终得到生成文件的路径。1234gulp.src(\"app/src/**/*.css\").pipe(gulp.dest(\"dist\"));//此时base的值为app/src，也就是说它的base路径为app/src//设该模式匹配到了文件app/src/css/normal.css//用dist替换掉base路径，最终得到dist/css/normal.css所以改变 base 路径后，gulp.dest() 生成的文件路径也会改变123456789gulp.src(\"script/lib/*.js\").pipe(gulp.dest(\"build\"));//没有配置base参数，此时默认的base路径为script/lib//假设匹配到的文件为script/lib/jquery.js//生成的文件路径为build/jquery.jsgulp.src(\"script/lib/*.js\", &#123;base: \"script\"&#125;).pipe(gulp.dest(\"build\"));//配置了base参数，此时base路径为script//假设匹配到的文件为script/lib/jquery.js//此时生成的文件路径为build/lib/jquery.js用 gulp.dest() 把文件流写入文件后，文件流仍然可以继续使用。gulp.task()gulp.task 方法用来定义任务，内部使用的是 Orchestrator ，其语法为：1gulp.task(name[, deps], fn)name 为任务名，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。deps 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数。fn 为任务函数，我们把任务要执行的代码都要写在里面。该参数也是可选的。1234gulp.task(\"mytask\", [\"array\", \"of\", \"task\", \"names\"], function() &#123; //定义一个有依赖的任务 // Do something&#125;);关于 gulp.task() ，我们需要知道执行多个任务时怎么来控制任务执行的顺序。gulp 中执行多个任务，可以通过任务依赖来实现。例如我想要执行 one ，two ，three 这三个任务，那我们就可以定义一个空的任务，然后把那三个任务当做这个空的任务的依赖就行了：12//只要执行default任务，就相当于把one,two,three这三个任务执行了gulp.task('default',['one','two','three']);如果任务相互之间没有依赖，任务会按你书写的顺序来执行，如果有依赖的话则会先执行依赖的任务。但是如果某个任务所依赖的任务是异步的，就要注意了，gulp 并不会等待那个所依赖的异步任务完成，而是会接着执行后续的任务。例如：1234567891011gulp.task('one', function()&#123; // one是一个异步执行的任务 setTimeout(function()&#123; console.log(\"one is done\"); &#125;,3000);&#125;);//two任务虽然依赖于one任务，但并不会等到one任务中的异步操作完成后再执行gulp.task(\"two\", [\"one\"], function()&#123; console.log(\"two is done\");&#125;);上面的例子中我们执行 two 任务时，会先执行 one 任务，但不会去等待 one 任务中的异步操作完成后再执行 two 任务，而是紧接着执行 two 任务。因为 one 任务耗时 3 秒，所以 two 任务会在 one 任务中的异步操作完成之前就执行了。那如果我们想等待异步任务中的异步操作完成后再执行后续的任务，该怎么做呢？有三种方法可以实现：第一：在异步操作完成后执行一个回调函数来通知 gulp 这个异步任务已经完成，这个回调函数就是任务函数的第一个参数。12345678910111213gulp.task(\"one\", function(cb) &#123; //cb为任务函数提供的回调，用来通知任务已经完成 //one是一个异步执行的任务 setTimeout(function()&#123; console.log(\"one is done\"); cb(); //执行回调，表示这个异步任务已经完成 &#125;,5000);&#125;);//这时two任务会在one任务中的异步操作完成后再执行gulp.task(\"two\", [\"one\"], function()&#123; console.log(\"two is done\");&#125;);第二：定义任务时返回一个流对象。适用于任务就是操作 gulp.src 获取到的流的情况。1234567891011gulp.task(\"one\", function(cb) &#123; var stream = gulp.src(\"client/**/*.js\") .pipe(dosomething()) //dosomething()中有某些异步操作 .pipe(gulp.dest(\"build\")); return stream;&#125;);// 这是two任务会在one任务中的异步操作完成后再执行gulp.task(\"two\", [\"one\"], function()&#123; console.log(\"two is done\");&#125;);第三：返回一个 promise 对象，例如：12345678910111213var Q = require('q'); //一个著名的异步处理的库 https://github.com/kriskowal/qgulp.task(\"one\", function(cb)&#123; var deferred = Q.defer(); //做一些异步操作 setTimeout(function()&#123; deferred.resolve(); &#125;,5000); return deferred.promise;&#125;);gulp.task(\"two\", [\"one\"], function() &#123; console.log(\"two is done\");&#125;);关于 gulp.task() ，主要的就是要清除当依赖异步任务时要如何处理。gulp.watch()gulp.watch() 用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。其语法为：1gulp.watch(glob[, opts], tasks);glob 为要监视的文件匹配模式，规则和用法与 gulp.src() 方法中的 glob 相同。opts 为一个可选的配置对象，通常不需要用到。tasks 为文件变化后要执行的任务，为一个数组1234567gulp.task(\"uglify\", function() &#123; //do something&#125;);gulp.task(\"reload\", function() &#123; //do something&#125;);gulp.watch(\"js/**/*.js\", [\"uglify\",\"reload\"]);gulp.watch(glob [,opts, cb])glob 和 opts 参数与第一种用法相同cb 参数为一个函数。每当监视的文件发生变化时，就会调用这个函数，并且会给它传入一个对象，该对象包含了文件变化的一些信息，type 属性为变化的类型，可以是 added 、changed 、deleted ，path 属性为发生变化的文件的路径1234gulp.watch(\"js/**/*.js\", function(event)&#123; console.log(event.type); //变化类型added为新增，deleted为删除，changed为改变 console.log(event.path); //变化的文件的路径&#125;);gulp 的插件gulp 本身虽然不能完成很多任务，但它有大量插件可用，我们可以在 插件页面 或者在 npm 搜索 gulpplugin 。列一些很棒的 plugin ：JSHint ： js代码检查分析工具gulp-coffee ： 编译CoffeeScriptgulp-mocha ： 执行Mocha测试gulp-bump ： 更新版本号gulp-sass ： sass 编译browser-sync ： 浏览器自动刷新gulp-uglify ： 代码压缩gulp-concat ： 合并gulp-eslint ： 支持 ES6 JSXgulp 命令行参数-v 或 --version 会显示全局和项目本地所安装的 gulp 版本号--require &lt;module path&gt; 将会在执行之前 require 一个模块。这对于一些语言编译器或者需要其他应用的情况来说很有用。你可以使用多个 --require--gulpfile &lt;gulpfile path&gt; 手动指定一个 gulpfile 的路径，这在你有很多个 gulpfile 的时候很有用。这也会将 CWD 设置到该 gulpfile 所在目录--cwd &lt;dir path&gt; 手动指定 CWD 。定义 gulpfile 查找的位置，此外，所有的相应的依赖（require）会从这里开始计算相对路径-T 或 --tasks 会显示所指定 gulpfile 的 task 依赖树--tasks-simple 会以纯文本的方式显示所载入的 gulpfile 中的 task 列表--color 强制 gulp 和 gulp 插件显示颜色，即便没有颜色支持--no-color 强制不显示颜色，即便检测到有颜色支持--silent 禁止所有的 gulp 日志命令行会在 process.env.INIT_CW 中记录它是从哪里被运行的。tip1、gulp 写进项目 package.json 文件的依赖有什么作用方便别人查看你项目中有些什么依赖，而且在项目目录下执行 npm install 命令会安装项目 package.json 中的所有依赖模块，这样就能简化项目的安装程序了，不用一个一个模块去安装啊。2、gulp 中着重了解 gulp.task() 如何处理依赖任务是耗时操作或者异步操作的情况。","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"gulp","slug":"gulp","permalink":"http://yoursite.com/tags/gulp/"}]},{"title":"AMD，CMD 规范详解","slug":"amd-cmd","date":"2017-03-19T19:25:24.000Z","updated":"2018-10-20T07:46:51.000Z","comments":false,"path":"2017/03/20/amd-cmd/","link":"","permalink":"http://yoursite.com/2017/03/20/amd-cmd/","excerpt":"当我们了解了 CommonJS 以后，CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式。为什么呢？","text":"当我们了解了 CommonJS 以后，CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式。为什么呢？12var math = require('math');math.add(2, 3);第二行 math.add(2, 3)，在第一行 require(&#39;math&#39;) 之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。对于浏览器，这是一个大问题，因为模块都放在服务器端。等待时间取决于网速的快慢，可能要等很长时间，浏览器处理“假死”状态。因此，浏览器端的模块，不能采用“同步加载”，只能采用“异步加载”。AMDAMD 规范 则是异步加载模块，允许指定回调函数。因此浏览器端一般采用 AMD 规范。AMD(Asynchronous module definition)： 异步模块定义。类似的还有 CommonJS Modules/2.0 规范，是 BravoJS 在推广过程中对模块定义的规范化产出。CMD(Common module definition)：通用模块定义。目前这些规范的实现都能达成浏览器端模块化开发的目的。服务端JS浏览器端JS相同的代码需要多次执行代码需要从一个服务器端分发到多个客户端执行CPU 和内存资源是瓶颈宽带是瓶颈加载时从磁盘中加载加载时需要通过网络加载AMD 的诞生，就是为了解决这两个问题：1.实现 js 文件的异步加载，避免网页失去响应2.管理模块之间的依赖性，便于代码的编写和维护AMD(异步模块定义)主要为前端 JS 的表现指定规范。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。AMD 也采用 require() 语句加载模块，但是不同于 CommonJS，它要求两个参数：1require([module], callback);第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数 callback，则是加载成功之后的回调函数：123require(['math'], function (math) &#123; math.add(2, 3);&#125;);实现 AMD 规范的加载器其实是挺多的，目前，主要有两个 Javascript 库实现了 AMD 规范：require.js 和 curl.js。不过多数人还是用 require.js 。另外如果对 ES6 的模块感兴趣，可以考虑 my.js ，是按照 ES6 草案的 module/loader 规范实现的。AMD 是 require.js 在推广过程中对模块定义的规范化产出。推荐学习 require.js。AMD 模块的写法require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。具体来说，就是模块必须采用特定的 define() 函数来定义。如果一个模块不依赖其他模块。那么可以直接定义在 define() 函数之中。假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：123456789// math.jsdefine(function ()&#123; var add = function (x,y)&#123; return x+y; &#125;; return &#123; add: add &#125;;&#125;);加载方法如下：1234// main.jsrequire(['math'], function (math)&#123; alert(math.add(1,1));&#125;);如果这个模块还依赖其他模块，那么 define() 函数的第一个参数，必须是一个数组，指明该模块的依赖性。12345678define(['myLib'], function(myLib)&#123; function foo()&#123; myLib.doSomething(); &#125; return &#123; foo : foo &#125;;&#125;);当 require() 函数加载上面这个模块的时候，就会先加载 myLib.js 文件。加载非规范的模块理论上，require.js 加载的模块，必须是按照 AMD 规范、用 define() 函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如 jQuery ）符合 AMD 规范，更多的库并不符合。那么，require.js 是否能够加载非规范的模块呢？回答是可以的。这样的模块在用 require() 加载之前，要先用 require.config() 方法，定义它们的一些特征。举例来说，underscore 和 backbone 这两个库，都没有采用 AMD 规范编写。如果要加载它们的话，必须先定义它们的特征。1234567891011require.config(&#123; shim: &#123; 'underscore': &#123; exports: '_' &#125;, 'backbone': &#123; deps: ['underscore', 'jquery'], exports: 'Backbone' &#125; &#125;&#125;);require.config() 接受一个配置对象，这个对象除了有前面说过的 paths 属性之外，还有一个 shim 属性，专门用来配置不兼容的模块。具体来说，每个模块要定义：（1）exports 值（输出的变量名），表明这个模块外部调用时的名称；（2）deps 数组，表明该模块的依赖性。比如，jQuery 的插件可以这样定义：123456shim: &#123; 'jquery.scroll': &#123; deps: ['jquery'], exports: 'jQuery.fn.scroll' &#125;&#125;CMDCMD 是 sea.js 在推广过程中对模块定义的规范化产出。CMD 模块定义在 CMD 规范中，一个模块就是一个文件。define 是一个全局函数，用来定义模块。define 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串。factory 为对象、字符串时，表示模块的接口就是该对象、字符串。比如可以定义一个 JSON 数据模块：1define(&#123;\"foo\": \"bar\"&#125;);也可以通过字符串定义模板模块：1define('I am a template.My name is &#123;&#123;name&#125;&#125;.');factory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。factory 是一个函数，有三个参数，function(require, exports, module)1、require 是一个方法，接受模块标识作为唯一参数，用来获取其他模块提供的接口：require(id)2、exports 是一个对象，用来向外提供模块接口3、module 是一个对象，上面存储了与当前模块相关联的一些属性和方法1234567define(function(require, exports, module) &#123; var a = require('./a'); a.doSomething(); // 依赖就近书写，什么时候用到什么时候引入 var b = require('./b'); b.doSomething();&#125;);建议写一写 SeaJS 的 CMD 规范，与 AMD 非常类似，在国内的影响力非常大，但是个人觉得 SeaJS 比 RequireJS 好很多，另外由于是国人开发的，交流也非常方便，可以看到 github 上的更新、互动非常频繁。AMD 与 CMD 的区别区别：对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从2.0开始，也改成了可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.CMD 推崇依赖就近，AMD 推崇依赖前置","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"CommonJS 详细介绍","slug":"commonjs","date":"2017-03-07T05:25:24.000Z","updated":"2019-04-10T02:13:19.495Z","comments":true,"path":"2017/03/07/commonjs/","link":"","permalink":"http://yoursite.com/2017/03/07/commonjs/","excerpt":"CommonJS 规范与实现正如当年为了统一 JavaScript 语言标准，人们制定了 ECMAScript 规范一样，如今为了统一 JavaScript 在浏览器之外的实现，CommonJS 诞生了。CommonJS 试图定义一套普通应用程序使用的 API，从而填补 JavaScript 标准库过于简单的不足。CommonJS 的终极目标是制定一个像 C++ 标准库一样的规范，使得基于 CommonJS API 的应用程序可以在不同的环境下运行，就像用 C++ 编写的应用程序可以使用不同的编译器和运行时函数库一样。为了保持中立，CommonJS 不参与标准库实现，其实现交给像 Node.js 之类的项目来完成。下图是 CommonJS 的各种实现。","text":"CommonJS 规范与实现正如当年为了统一 JavaScript 语言标准，人们制定了 ECMAScript 规范一样，如今为了统一 JavaScript 在浏览器之外的实现，CommonJS 诞生了。CommonJS 试图定义一套普通应用程序使用的 API，从而填补 JavaScript 标准库过于简单的不足。CommonJS 的终极目标是制定一个像 C++ 标准库一样的规范，使得基于 CommonJS API 的应用程序可以在不同的环境下运行，就像用 C++ 编写的应用程序可以使用不同的编译器和运行时函数库一样。为了保持中立，CommonJS 不参与标准库实现，其实现交给像 Node.js 之类的项目来完成。下图是 CommonJS 的各种实现。CommonJS 规范包括了模块（modules）、包（packages）、系统（system）、二进制（binary）、控制台（console）、编码（encodings）、文件系统（filesystems）、套接字（sockets）、单元测试（unit testing）等部分。Node.js 是目前 CommonJS 规范最热门的一个实现，它基于 CommonJS 的 Modules/1.0 规范实现了 Node.js 的模块，同时随着 CommonJS 规范的更新，Node.js 也在不断跟进。模块（Module）和包（Package）是 Node.js 最重要的支柱。开发一个具有一定规模的程序不可能只用一个文件，通常需要把各个功能拆分、封装，然后组合起来，模块正式为了实现这种方式而诞生的。在浏览器 JavaScript 中，脚本模块的拆分和组合通常使用 HTML 的 script 标签来实现。Node.js 提供了 require 函数来调用其他模块，而且模块都是基于文件的，机制十分简单。CommonJS 规范的实现Node.js 的模块和包机制的实现参照了 CommonJS 的标准，但并未完全遵循。不过两者的区别不大，一般来说你大可不必担心，只有当你试图制作一个除了支持 Node.js 之外还要支持其他平台的模块或包的时候才需要仔细研究。通常，两者没有直接冲突的地方。我们经常把 Node.js 的模块和包相提并论，因为模块和包是没有本质区别的，两个概念也时常混用。如果要辨析，那么可以把包理解成是实现了某个功能模块的集合，用于发布和维护。对使用者来说，模块和包的区别是透明的，因此经常不作区分。CommonJS 规范规定，每个模块内部，module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性。为了方便，Node.js 为每个模块提供一个 exports 变量，指向 module.exports。这等同在每个模块头部，有一行这样的命令：1var exports = module.exports;注意，不能直接将 exports 变量指向一个值，因为这样等于切断了 exports 与 module.exports 的联系。如果你觉得，exports 与 module.exports 之间的区别很难分清，一个简单的处理办法，就是放弃使用 exports，只使用 module.exports。什么是模块模块是 Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是 JavaScript 代码、JSON 或者编译过的 C/C++ 扩展。创建及加载模块创建模块在 Node.js 中，创建一个模块非常简单，因为一个文件就是一个模块，我们要关注的问题仅仅在于如何在其他文件中获取这个模块。Node.js 提供了 exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。让我以一个例子来了解模块。创建一个 module.js 文件，内容是：12345678// module.jsvar name;exports.setName = function(thyName) &#123; name = thyName;&#125;;exports.sayHello = function() &#123; console.log('Hello ' + name);&#125;;在同一目录下创建 getmodule.js，内容是：1234// getmodule.jsvar myModule = require('./module');myModule.setName('Yu');myModule.sayHello();运行 node getmodule.js ，结果是：Hello Yumodule.js 通过 exports 对象把 setName 和 sayHello 作为模块的访问接口，在 getmodule.js 中通过 require(&#39;./module&#39;) 加载这个模块，然后就可以直接访问 module.js 中 exports 对象的成员函数了。加载模块在 Node.js 中，我们可以直接通过 require 获取核心模块，例如 require(&#39;fs&#39;) 。核心模块拥有最高的加载优先级，换言之如果有模块与其命名冲突，Node.js 总是会加载核心模块。如果有模块与核心模块命名冲突，Node.js 为什么可以选择加载核心模块呢？require 的实现机制是怎样的呢？1、按路径加载模块如果 require 参数以 “/“ 开头，那么就以绝对路径的方式查找模块名称，例如 require(&#39;/home/neveryu/module&#39;) 将会按照 优先级依次尝试加载 /home/neveryu/module.js、/home/neveryu/module.json 和 /home/neveryu/module.node。如果 require 参数 “./“ 或 “../“ 开头，那么则以相对路径的方式查找模块，这种方式在应用中是最常见的。例如前面的例子中我们用了 require(&#39;./hello&#39;)来加载同一文件夹下的 hello.js。2、通过查找 node_modules 目录加载模块如果 require 参数不以 “/“ ， “./“ 或 “../“ 开头，而该模块又不是核心模块，那么就要通过查找 node_modules 加载模块了。我们使用 npm 获取的包通常就是以这种方式加载的。在 node_modules 目录的外面一层，外面可以直接使用 require(&#39;express&#39;) 来代替 require(&#39;./node_modules/express&#39;)。这是 Node.js 模块加载的一个重要特征：通过查找 node_modules 目录来加载模块。我们不仅要在 project 目录下的 app.js 中使用 require(&#39;express&#39;)，而且可能要在 controllers 子目录下的 index_controller.js 中也使用 require(&#39;express&#39;)，这时就需要向父目录上溯一层才能找到 node_modules 中的 express 了。3、加载缓存Node.js 通过文件名缓存所有加载过的文件模块，所以以后再访问到时就不会重新加载了。注意，Node.js 是根据实际文件名缓存的，而不是 require() 提供的参数缓存的，也就是说即使你分别通过 require(&#39;express&#39;) 和 require(&#39;./node_modules/express&#39;)加载两次，也不会重复加载，因为尽管两次参数不同，解析到的文件却是同一个。单次加载上面这个例子有点类似于创建一个对象，但实际上和对象又有本质的区别，因为 require 不会重复加载模块，也就是说无论调用多少次 require，获得的模块都是同一个。我们在 getmodule.js 的基础上稍作修改：12345678// loadmodule.jsvar hello1 = require('./module');hello1.setName('Yu');var hello2 = require('./module');hello2.setName('Yu 2');hello1.sayHello();运行后发现输出结果是 Hello Yu 2，这是因为变量 hello1 和 hello2 指向的是同一个实例，因此 hello1.setName 的结果被 hello2.setName 覆盖，最终输出结果是由后者决定的。覆盖 exports有时候我们只是想把一个对象封装到模块中，例如：123456789101112// singleobjct.jsfunction Hello() &#123; var name; this.setName = function (thyName) &#123; name = thyName; &#125;; this.sayHello = function () &#123; console.log('Hello ' + name); &#125;;&#125;exports.Hello = Hello;此时我们在其他文件中需要通过 require(&#39;./singleobject&#39;).Hello 来获取 Hello 对象，这略显冗余，可以用下面方法稍微简化。1234567891011// hello.jsfunction Hello() &#123; var name; this.setName = function(thyName) &#123; name = thyName; &#125;; this.sayHello = function() &#123; console.log('Hello ' + name); &#125;;&#125;module.exports = Hello;这样就可以直接获得这个对象了：12345// gethello.jsvar Hello = require('./hello');hello = new Hello();hello.setName('Yu');hello.sayHello();TipCommonJS 模块的特点如下：所有代码都运行在模块作用域，不会污染全局作用域。独立性是模块的重要特点就，模块内部最好不与程序的其他部分直接交互。模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。模块加载的顺序，按照其在代码中出现的顺序。CommonJS 中的 Require建议阅览：CommonJS require 规范","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"中国国内 JavaScript 圈的现状如何","slug":"china-javascript-environment","date":"2016-11-18T05:25:24.000Z","updated":"2018-10-20T07:46:51.000Z","comments":false,"path":"2016/11/18/china-javascript-environment/","link":"","permalink":"http://yoursite.com/2016/11/18/china-javascript-environment/","excerpt":"探讨核心： 我们不编写代码，我们只是国外优秀框架的搬运工。","text":"探讨核心： 我们不编写代码，我们只是国外优秀框架的搬运工。现状么二五八万忙着造轮子步道小白忙着加群拜山头还有几个默默钻研又不为人知的浮躁，自我，没劲有天 leader 抽烟吹逼时候说：国内这些前端啊，多数靠的是名声，写点东西造个轮子，参加一下活动吹吹逼，建个群拉个山头搞一帮小弟，等公司挖了当上leader就算升天了国内 star 最多的没记错是NW吧，噢，人家是C艹分类下的玻璃心洗洗睡吧 只不过很多开发者停留在外来的和尚会念经阶段。如果很多老外都在用你的技术，国内的名博上写上一篇你的文章表扬一下，国内脑残粉扎堆严重。放大些来看，不只前端，其他行业的观念也是如此。另外，国内开源心态还不成熟，拿来主义倾向严重。遇到问题，你不帮 ta 解决问题你做的技术就是无用论的不在少数。使得很多开发人员认为做这样的开源简直就是做雷锋，没什么意义，所以很多牛人独善其身的不少。认为开源的技术就是无 bug ，产品，是完美，否则你就不要开，这种扯蛋的心态的人也很多。有个东西叫KPI的好吗，你成天在公司，不折腾点东西怎么算KPI，怎么分奖金?为了自身业务和KPI需求，在大点的公司，是肯定有自己的框架的,虽然往往里面充满了来自jquery啊prototypejs等等类库或者框架的几乎一样的代码，甚至在自身需求上还剪掉了一些通用方法，用开发者的话说，这个太臃肿了，我的简洁，然后慢慢的，功能加上来，文件也越来越大了，最后也都趋于跟其他已经使用广泛的类库或者框架一致…在量的堆积下，国内的开源东西也凸显了不少好用的，比如fis、eccharts、sea、至于kissy之流咱就忽略吧，毕竟可能是自己的业务需求嘛，虽然文档写的好烂,领导升职了，后续也没人搞了….另外还有一个问题，国内很多框架什么的，核心就一个人，在工作繁忙的时候，bug也就没有精力去修复,框架能存在多久，是个问题…有时候在群里都有人宣传自己的框架的，说不定一两年后，人都转行了，之前的框架呢？会有人接手？悄无声息死掉的框架，大把的。确实搬运了不少国外牛人的框架，但是我也要说一句吐槽的话【bug真特么的多，屁股还要自己擦】水平不够只有搬运，擦屁股才是个技术活。国内其实是有不少在做框架开发或者库开发的，包括BAT新浪网易等等，只是这些框架多数主要围绕自身业务做的，在加上文档、封闭性等等原因其它公司不太适合去用。比如当年做的还不错的seajs，从前端的设计思路和实现上都很简洁明了，只是当时它们要支持自己的复杂业务搞了一套繁琐的路径配置逻辑结果就让人比较头疼了。所以我觉得最重要的原因还是环境问题，没有包容、协作、共赢的生态环境人们的思维就会局限在谋求自身的利益，而不是整体价值的最大化。我倒是觉得做搬运工也没什么丢人的，只能说我们条件还不具备，能给出一些有用的反馈也算是有价值的事情了。开源不分国界，私以为在这个时代还纠结于国内外，纠结于自主知识产权，纠结于国人当自强的都是莫名其妙的民族主义在作祟。这不是民族主义，这是圈子问题。你的圈子里没有牛人能做出这些东西，这就是差距。国内圈子要是和湾区的交流跟加拿大人一样方便频繁肯定没人说这话。我想问的是那些自己发明轮子的同行们，Backbone.js、AngularJS、jQuery、RequireJS、Bower、Grunt、Yomen 等等无数的开源框架和库以及整个开源社区组成的前端开发生态圈的各种免费解决方案们，到底无法解决工作当中的哪些实际问题，以至于要不停的重复发明轮子，而且还是方的轮子，难道只是为了秀肌肉？或者在各种场合做 talk？国内某圈子都是国外技术的搬运工不可怕，可怕的是几个高票答案里那股反智主义倾向。有优秀的轮子为什么不拿来用？实际上这并不只是国内JS圈的情况，甚至不只是JS圈的情况，其实世界上大多数程序员都是优秀的搬运工啊XD。谢邀。我工作中并不用js，所以对于js圈的话并不是很熟悉。题主说国内只是优秀库的搬运工，其实对于这句话我觉得应该客观对待，确实很多前端都是在使用国外的优秀库，比如boostrap等，但是会用与能用是两个不同的概念，会用意味着肯定是有pr的，会用的人水平也应该是肯定的。而且国内也有非常多的优秀js库，比如老赵的wind.js，淘宝的kissy等，再看诸如淘宝，腾讯，360等前端团队牛人泛多，他们是绝对有能力写出题主所定义的优秀库的，有能力会用而且会改造现有的优秀库其实力也不是一般的。所以对于是否是国外优秀库的搬运工，这里应该不存在绝对的定论，理性看待这个问题，至少鄙人非常乐观。其实我刚入行的时候，真的很认真的去听所有国内的 talk，想听到他们为什么做这样的库、做那样的框架，而不是使用开源的解决方案，目前为止，没听到有说服力的理由。很多答案都提到了国内的几个优秀开源库，当然前端圈子里面优秀的开源库很多，但目之所及，更多的是照猫画虎反类犬，至于哪些经典案例，我还是怕得罪同行的，就不说了。我真的希望能和同行们一起做点别人没做过的库和框架，解决一些现在没人解决的问题，改善一下这种浮躁的风气。所以这个评价算是很中肯了，至少我会选择更务实的同事一起工作。我匿名是怕得罪同行，毕竟还要混饭吃。但是替他们说话的人还匿名恐怕是中枪了吧？Gulp 和 Grunt 用不同的方式解决同一个问题，并且各有千秋，但请别告诉我你们发明的轮子比人家的好用。没有人会反对创新和自主创造，反对的是用同一个姿势吃人家剩下的东西。就算是同样的东西，你能说出 Bootstrap 和 GWSK 哪个更好吗，恐怕是同样好吧？但请别说 jQuery 和 XX 板，RequireJS 和 XXXJS 一样好用。你当然也可以反驳说如果不做永远都无法超越，那么首先请你做的至少和人家一样好了以后再到处去布道去秀，另外我始终不觉得超越是什么伟大到值得拿出来说的目的。作为一个工程师，我只想做出真正有用、用户喜欢的产品，对于我所用的框架到底是中国人开发的还是外国人开发的，对不起我不 care，如果你说这叫反智我只能呵呵了。我对这么多答案中表现出来的对于浪费公司资源去做完全无意义的事情然后还到处去显摆并作为 promotion 资本这件事情表现出来的漠然感到震惊。这个世界上从来都不缺想让世界变得更好的人，特别是工程师群体，但可惜的是出于某些邪恶目的而重复发明轮子的人也不少。我不否定国内有优秀的轮子，并且敬佩能做出好的开源项目的人，但我敬佩你不会是因为你有个「中国工程师」的定语。要强调的的是国内前端圈子里面非常流行的「为了做而做，做的是完全一样的东西还没人家好，然后还到处去显摆」这种行为真的是令人恶心。排名第一的答案的外链中有一句话：“我以前就一直说：我们离最先进的技术的差距只有半年。”其实这已经很说明问题了，离最先进的技术有差距（不管是半年还是半个月），这说明国内做的东西不是原创的，而是在重复造轮子（有些有微创新，当然我相信也有原创的，但应该非常少）比如 ueditor，国外都有那么强大的编辑器了，如果照着它都不能造一个轮子出来，那只能怀疑造轮子的人水平有问题。我记得 ueditor 团队还制作了个视频宣讲 ueditor，其中说到xxx还用了很nb的算法（二分查找），不知道的人还真以为是自己想出来的，回来一看 fckeditor，代码都几乎一模一样（当然 ueditor 本身是很不错的，比较符合国情）。再说 SeaJS，CMD 是神马啊，它真的很C（ommon）吗？SeaJS 模块难道不是异步模块（AMD）吗？命名上就把人搞晕了。怎么解释还需要修改 jQuery 源代码的问题？jQuery 会来兼容 SeaJS 吗？你们知道有多少人兴致勃勃地用了 SeaJS 后最后又切换到 requierJS 吗？再说下，国内的技术人员不但不团结，还互相讥讽，我相信这一点玉伯深有体会。大家可以去看下 SeaJS 的源代码贡献者，除了玉伯你们都还认识谁？SeaJS 团队发布了 SPM 工具，遭受了多少的嘲笑啊！虽然 SPM 最为人诟病。整天张口闭口说开源的那些人，怎么都觉得 SeaJS 已经很完美了？不是不用国内的东西，而是用过后觉得很失望，要文档没文档，说改就改不够稳定。并且据我所知，很多项目的核心开发就一个人，我能相信这东西靠谱吗？我可要为我整个公司负责啊，解决业务需求是我的首要目标，出了 bug 我可担当不起啊。重复造轮子没问题，但你造个方的轮子或者和不符合国际标准的轮子还到处得瑟让你的同事或者业界朋友来用，你就是来捣乱的！语气重了点，希望大家见谅！中小公司缺乏强力统一的方向和规范，很多都只是搬运工，没有深入。大公司如bat之类的会有自己的体系，也是众多工程师的学习楷模。原文","categories":[{"name":"综合","slug":"综合","permalink":"http://yoursite.com/categories/综合/"}],"tags":[{"name":"essay","slug":"essay","permalink":"http://yoursite.com/tags/essay/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"Git学习总结","slug":"git","date":"2016-10-07T05:25:24.000Z","updated":"2018-10-20T07:46:51.000Z","comments":false,"path":"2016/10/07/git/","link":"","permalink":"http://yoursite.com/2016/10/07/git/","excerpt":"git 简介git 是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。在 git 中，工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。","text":"git 简介git 是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。在 git 中，工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。实用指令详解merge通常，合并分支时，如果可能，Git 会用 Fast froward 模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用 Fast forward 模式，Git 就会在 merge 时生成一个新的 commit ，这样，从分支历史上就可以看出分支信息。git merge --no-ff -m &#39;merge with no-ff&#39; dev因为本次合并要创建一个新的 commit，所以加上 -m 参数，把 commit 描述写进去。合并分支时，加上 --no-ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 fast forward 合并就看不出来曾经做过合并。fetch一旦远程主机的版本库有了更新(git 术语叫做 commit)，需要将这些更新取回本地，这时就要用到 git fetch 命令。git fetch &lt;远程主机名&gt;上面命令将某个远程主机的更新，全部取回本地。默认情况下，git fetch 取回所有分支(branch)的更新。如果只想取回特定分支的更新，可以指定分支名。git fetch &lt;远程主机名&gt; &lt;分支名&gt;比如，取回 origin 主机的 master 分支git fetch origin master所取回的更新，在本地主机上要用“远程主机名/分支名”的形式读取。比如 origin 主机的 master，就要用 origin/master 读取。git fetch -p ：取回远程更新，删除不存在的分支。pullgit pull 命令的作用是，取回远程主机的某个分支的更新，再与本地的指定分支合并，完整格式如下：git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。git pull origin next:master如果远程分支是与当前分支合并，则冒号后面的部分可以省略。git pull origin master上面的命令表示，取回 origin/master 分支，再与当前分支合并。实质上，这等同于先做 git fetch，再 merge。12git fetch origingit merge origin/master在某些场合，git 会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在 git clone 的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的 master 分支自动“追踪” origin/master 分支。git 也允许手动建立追踪关系。git branch --set-upstream master origin/next上面的命令指定 master 分支追踪 origin/next 分支。如果当前分支与远程分支存在追踪关系，git pull 就可以省略远程分支名。git pull origin上面命令表示，本地的当前分支自动与对应的 origin 主机“追踪分支”(remote-tracking branch)进行合并。如果当前分支只有一个追踪分支，连远程主机名都可以忽略。git pull上面命令表示，当前分支自动与唯一一个追踪分支进行合并。如果合并需要采用 rebase 模式，可以使用 -rebase 选项。git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;pushgit push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相仿。git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;如果省略远程分支名，则表示将本地分支推送与之存在“追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。git push origin master上面命令表示，将本地的 master 分支推送到 origin 主机的 master 分支。如果后者不存在，则会被新建。如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。git push origin :master等同于git push origin --delete master上面命令表示删除 origin 主机的 master 分支。如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。git push origin上面命令表示，将当前分支推送到 origin 主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。git push如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用 git push 。git push -u origin master上面的命令将本地 master 分支推送到 origin 主机，同时指定 origin 为默认主机，后面就可以不加任何参数使用 git push 了。不带任何参数的 git push ，默认只推送当前分支，这叫做 simple 方式。此外，还有一种 matching 方式，会推送所有有对应的远程分支的本地分支。git 2.0 版本之前，默认采用 matching 方式，现在改为默认采用 simple 方式，如果要修改这个设置，可以采用 git config 命令。git config --global push.default matching或者git config --global push.default simple还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用 -all 选项。git push --all origin上面命令表示，将所有本地分支都推送到 origin 主机。如果远程主机的版本比本地版本更新，推送时 git 会报错，要求先在本地做 git pull 合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用 -force 选项。git push --force origin上面命令使用-force选项，结果导致在远程主机产生一个“非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用 -force 选项。最后，git push 不会推送标签(tag)，除非使用 -tags 选项。git push origin --tagsloggit log 命令可以查看历史记录，git log 命令显示从最近到最远的提交日志；如果嫌输出信息太多，看得眼花缭乱的，可以试试 git log --pretty=oneline 。我们可以看到当前版本以及之前的版本日志以及版本号。用 git log --graph 命令可以看到分支合并图。或者两个参数一起用：git log --graph --pretty=onelinegit log --graph --pretty=oneline --abbrev-commit首先，git 必须知道当前版本是哪个版本，在 git 中，用 HEAD 表示当前版本，上一个版本就是 HEAD^ ，上上一个版本就是 HEAD^^ ， 当然往上100个版本写100个 ^ 比较容易数不过来，所以写成 HEAD~100 。现在，我们要把当前版本回退到上一个版本，就可以使用 git reset 命令：git reset --hard HEAD^当你回退到了某个版本后，git log 只能显示此版本及之前的版本的日志，之后的版本日志就看不到了，但是，我们想恢复到之后教新的版本怎么办？Git 提供了一个命令 git reflog 用来记录你的每一次命令tag查看标签（用来标记标志性的稳定版本信息）发布一个版本时，我们通常先在版本库中打一个标签(tag)，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。相比于 commit 的版本号(40位16进制)，标签号则要好使的多。所以，tag 就是一个让人容易记住的有意义的名字，它跟某个 commit 绑定在一起。git tag [tag name]如果没有标签名，则为查看所有标签，带标签名则为新建标签git tag &lt;tag name&gt; 就可以打一个新标签还可以创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字。git tag -a &lt;tag name&gt; -m &lt;comment&gt; ：添加带注释的标签eg: git tag -a v1.2 -m &#39;version 1.2 released&#39;git tag -a &lt;tag name&gt; &lt;md5&gt; ：对某个版本打标签默认标签是打在最新提交的 commit 上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？方法是找到历史提交的 commit id，然后打上就可以了。git log --pretty=oneline --abbrev-commit比方说要对 add merge 这次提交打标签，它对应的 commit id 是 6224937，那么我们就可以使用命令：git tag v1.2 6224937再用命令 git log 查看标签可以用 git show &lt;tagname&gt; 查看标签信息如果标签打错了，也可以删除：git tag -d v1.2如果要推送某个标签到远程，使用命令 git push origin &lt;tagname&gt;eg: git push origin v1.2如果标签已经推送到远程，要删除远程标签就要麻烦一点，先从本地删除：git tag -d v1.2然后，从远程删除；删除命令也是 push ，但是格式如下：git push origin :ref/tags/v1.2git tag -l &#39;[expression]&#39;查看那符合正则表达式的stashgit stash备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到 Git 栈中。git stash pop从 Git 栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个 stash 的内容，所以用栈来管理，pop 会从最近的一个 stash 中读取内容并恢复。git stash list显示 Git 栈中内的所有备份，可以利用这个列表来决定从哪个地方恢复。git stash clear : 清空 Git 栈。使用 git 的时候，我们往往使用 branch 解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码，如果别人或者自己发现原有的分支上有个不得不修改的 bug，我们往往会把完成一半的代码 commit 提交到本地仓库，然后切换分支去修改 bug，改好之后再切换回来。这样的话往往 log 上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急 bug，那么使用 git stash 就可以将你当前未提交到本地的代码推入到 git 的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修 bug，等到修完 bug，提交到服务器上后，再使用 git stash apply 将以前一般的工作应用回来。也许有的人会说，那我可不可以多次将未提交的代码压入到栈中？答案是可以的。当你多次使用 git stash 命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑， git stash list 命令可以将当前的 Git 栈信息打印出来，你只需要将找到对应的版本号，例如使用 git stash apply stash@{1} 就可以将你指定版本号为 stash@{1} 的工作取出来，当你将所有的栈都应用回来的时候，可以使用 git stash clear 来将栈清空。在这里顺便提下 git format-patch -n , n是具体某个数字， 例如 ‘git format-patch -1’ 这时便会根据log生成一个对应的补丁，如果 ‘git format-patch -2’ 那么便会生成 2 个补丁，当然前提是你的 log 上有至少有两个记录。看过上面的信息，就可以知道使用场合了：当前工作区内容已被修改，但是并未完成。这时 Boss 来了，说前面的分支上面有一个 bug，需要立即修复。可是我又不想提交目前的修改，因为修改没有完成。但是，不提交的话，又没有办法 checkout 到前面的分支。此时用 git stash 就相当于备份了工作区了。然后在 checkout 过去修改，就能够达到保存当前工作区，并及时恢复的作用。注意这里由于只 stash 了一次所以要使用 pop，具体你存放了多少。remote查看远程仓库名git remote -v查看远程仓库urlgit remote add &lt;basename&gt; &lt;url&gt;新增远程仓库git remote show &lt;basename&gt;查看远程仓库详细信息git remote rename &lt;old basename&gt; &lt;new basename&gt;重命名远程仓库commitgit commit -a -m &#39;xx&#39;暂存并提交branchgit branch查看本地仓库分支git branch -r查看远程分支情况git branch -a查看本地和远程的所有分支情况git branch -v查看本地仓库分支最后一次提交情况git branch -vv查看分支跟踪情况git branch &lt;branch name&gt;新建分支git branch -d &lt;branch name&gt;删除分支git branch -D &lt;branch name&gt;强制删除分支git branch [--merged | --no-merged]查看已合并|未合并的本地仓库分支git branch -u &lt;remote base&gt;/&lt;remote branch&gt;修改当前跟踪分支checkoutgit checkout -- [file] ：恢复文件git checkout -- demo.html 意思就是，把 demo.html 文件在工作区的修改全部撤销，这里有两种情况：一种是 demo.html 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；一种是 demo.html 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加暂存区后的状态。总之，就是让这个文件回到最后一次 git commit 或 git add 时的状态。但是如果 git add 到暂存区了，在 commit 之前，想撤销：Git 同样告诉我们，用命令 git reset HEAD file 可以把暂存区的修改撤销掉(unstage)，重新放回工作区。git reset 命令既可以回退版本，也可以把暂存区的修改回退到工作区，当我们用 HEAD 时，表示最新的版本。再用 git status 查看一下，现在暂存区是干净的，工作区有修改：还记得如果丢弃工作区的修改吗？对的，使用：git checkout -- demo.htmlgit checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以”一键还原”。git checkout -b [branchname] [tagname]在特定的版本上创建一个新的分支并切换到此分支git checkout -b [local branch] [remote base]/[remote branch]将远程分支检出到本地分支，并追踪git checkout --track &lt;remote base&gt;/&lt;remote branch&gt;让当前分支跟踪远程分支rebasegit rebase [basebranch]变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。常见问题git clonegit clone 支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等。使用 https 除了速度慢意外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;如果不写本地目录名，默认就是版本库的名字如何新建分支本地建立 branch 並立即切换到新分支git checkout -b &lt;branch_name&gt;下面的命令表示，在 origin/master 的基础上，创建一个分支。git checkout -b newBranch origin/master修改分支名称git branch -m &lt;new_name&gt;从远程仓库拉取代码到本地仓库，并建立跟踪关系git checkout -b &lt;本地新分支名&gt; &lt;对应的远程分支名&gt;如何在远程仓库新建一个分支新建一个本地分支，按照正常流程提交完代码后，推送到远程git push &lt;remote base&gt; &lt;local branch&gt;:&lt;remote branch&gt;比较文件git diff HEAD -- demo.html命令可以查看工作区的 demo.html 和版本库里面最新版本的区别。忽略某些文件默认方法是在当前项目目录下创建一个 .gitignore 文件，如果需要忽略的文件已经添加到版本库中，请先移除git rm --cached [file]不删除文件，只移除追踪。123cat .gitignore*.[oa]*~文件 .gitignore 的格式规范如下：所有空行或者以注释符号 # 开头的目录都会被 git 忽略可以使用标准的 glob 模式匹配匹配模式最后跟反斜杠（/）说明要忽略的目录要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反bug 分支git 提供了一个 stash 功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。git stash修改完 bug 后，回到当前分支上继续干活，工作区是干净的，刚才的工作现场存到哪里去了？git stash list ：查看 stash 列表(stash 是一个栈的结构)git 把 stash 内容存在某个地方了，但是需要恢复一下，有两个办法：一是用 git stash apply 恢复，但是恢复后，stash 内容并不删除，你需要用 git stash drop 来删除；另一种方式是用 git stash pop ，恢复的同时把 stash 内容也删了；你可以多次 stash ，恢复的时候，先用 git stash list 查看，然后恢复指定的 stash，用命令：git stash apply stash@{0}配置文件配置 Git 的时候，加上 –global 是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。配置文件放哪了？每个仓库的 Git 配置文件都放在 .git/config 文件中，在这份配置文件中，别名就在 [alias] 后面，要删除别名，直接把对应的行删掉即可。查看配置git config -1设置git push 默认git config --global push.default current设置别名git config --global alias.&lt;name&gt; &lt;commend&gt;我的设置：git config --global alias.st statusgit config --global alias.cm &quot;commit -m&quot;git config --global alias.ph &quot;push origin &lt;local_repository&gt;:&lt;remote_repository&gt;&quot;保存用户名和密码对于http(s)协议，可以用下面命令临时缓存git config --global credential.helper cache开启linux缓存git config --global credential.helper wincred开启windows缓存对于 ssh 协议，可以用 ssh key，具体教程网上很多解决问题问题一git 中执行命令 add .报错：Unlink of file ‘templates/opms.exe’ failed.Should I try again?(y/n)因为这个文件正在被占用，所以不能添加到暂存区，而正好这个 .exe 文件，我们是不需要添加到版本管理工具的。所以我们选择 n 。问题二git 中生成 sshkey: ssh-keygen -t rsa -C &quot;youremail&quot;这个email并没有什么用所以我们使用ssh-keygen -t rsa来生成sshkey就可以了。然后git中的配置文件：git config --listgit config --global user.name &quot;yu&quot;git config --global user.email &quot;react.dong.yu@gmail.com&quot;这种配置将会对本地所有的git仓库有效。那么在 push 的时候，远程就知道这个push来自于哪个email.但有时候在公司的时候，有的仓库是公司的，有的仓库是自己github的。这个时候就可以不设置global的配置了，而是在自己的仓库中设置git config --local user.email &quot;react.dong.yu@gmail.com&quot;问题三使用 windows 的同学注意了，如果你在资源管理器里新建一个 .gitignore 文件，它会提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为 .gitignore 了。有些时候，你想添加一个文件到 git，但发现添加不了，原因是这个文件被 .gitignore 忽略了：git add App.class如果你确实想添加该文件，可以用 -f 制添加到 git：git add -f App.class或者你发现，可能是 .gitignore 写得有问题，需要找出来到底哪个规则写错了。可以用 git check-ignore 命令检查：git check-ignore -v App.class问题四为什么我把我生成的 ssh key 添加到了 github 中然后 也 remote 了 https://github.com/Neveryu/Xxx.git为什么提交的时候报错，或者提示 输入密码账号是为什么ssh key 是 ssh 协议的密钥，http 协议没权限问题五git怎样删除未监视的文件 untracked files?用 git clean12345678910111213# 删除 untracked filesgit clean -f # 连 untracked 的目录也一起删掉git clean -fd # 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）git clean -xfd # 在用上述 git clean 前，墙裂建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删git clean -nxfdgit clean -nfgit clean -nfd我的常用命令12git branch -avvgit remote -v权威教程Pro Git 简体中文版","categories":[{"name":"综合","slug":"综合","permalink":"http://yoursite.com/categories/综合/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"如果深圳的夜晚没有风","slug":"essay-20160925","date":"2016-09-25T15:25:24.000Z","updated":"2018-10-20T07:46:51.000Z","comments":false,"path":"2016/09/25/essay-20160925/","link":"","permalink":"http://yoursite.com/2016/09/25/essay-20160925/","excerpt":"这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。","text":"这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。其实专业做博客的网站还是挺多的，比如说 CSDN 是吧，我之前也是在 CSDN 上面写一点东西，我的 CSDN 博客 http://blog.csdn.net/csdn_yudong 。但是 CSDN 毕竟是一个技术类的博客网站，如果写一点生活杂谈还是不太好，而且 CSDN 上面挂载的广告，以及页面风格，我不太喜欢，因为我喜欢【精于心，简于形】，这波 NexT 主题的广告是不是很硬。在我想做博客之前，一直到我开始着手做这个博客，其实花了好久时间。而在我着手开始做这个博客，到这个博客完成，其实并没有花多久。也说明了一个道理，就是一定要勇于尝试，关键是要动手。我想起了马士兵老师的一句话，一个新鲜的事物，你一定要先去用它，应用驱动学习。——我的建站日志有记录网站的建设过程。究其原因：第一个，我觉得是自己考虑的太多，没有太大的把握就不会轻易的去尝试，所以我在着手做这个之前花了很多的时间去查，域名空间这些的，而且这些出售这些的服务商也挺多的，我这个人有选择恐惧症。也是怪尴尬的，每次看到一个东西有好多选择的时候，我都去比较，去分析，头痛。。而且我想，域名空间搞好以后，还要自己写页面这些的。关键是还要设计博客风格，页面样式这些的，一想到这些，就感觉是一个不小的工程啊，后来才发现我多虑了。后来，无意中看到了 Hexo 的 Next 主题的一篇博客，风格样式挺不错的，感谢 Hexo 和 Next 的文档写的如此的棒，以至于每一个人都能根据教程搭建一个自己的博客。这一切是如此的美好。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/随笔/"}],"tags":[{"name":"essay","slug":"essay","permalink":"http://yoursite.com/tags/essay/"}]}]}